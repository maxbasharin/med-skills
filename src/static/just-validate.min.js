"use strict";
function _defineProperty(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
        value: n,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : e[t] = n,
        e
}
var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
    return typeof e
}
    : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
    }
    ;
!function () {
    for (var e = ["DocumentType", "Element", "CharacterData"], t = function () {
        null != this.parentNode && this.parentNode.removeChild(this)
    }, n = 0; n < e.length; n++) {
        var r = e[n];
        window[r] && !window[r].prototype.remove && (window[r].prototype.remove = t)
    }
}(),
    function (e) {
        function t() { }
        function n(e, t) {
            return function () {
                e.apply(t, arguments)
            }
        }
        function r(e) {
            if ("object" !== _typeof(this))
                throw new TypeError("Promises must be constructed via new");
            if ("function" != typeof e)
                throw new TypeError("not a function");
            this._state = 0,
                this._handled = !1,
                this._value = void 0,
                this._deferreds = [],
                u(e, this)
        }
        function i(e, t) {
            for (; 3 === e._state;)
                e = e._value;
            return 0 === e._state ? void e._deferreds.push(t) : (e._handled = !0,
                void r._immediateFn(function () {
                    var n = 1 === e._state ? t.onFulfilled : t.onRejected;
                    if (null === n)
                        return void (1 === e._state ? s : o)(t.promise, e._value);
                    var r;
                    try {
                        r = n(e._value)
                    } catch (i) {
                        return void o(t.promise, i)
                    }
                    s(t.promise, r)
                }))
        }
        function s(e, t) {
            try {
                if (t === e)
                    throw new TypeError("A promise cannot be resolved with itself.");
                if (t && ("object" === ("undefined" == typeof t ? "undefined" : _typeof(t)) || "function" == typeof t)) {
                    var i = t.then;
                    if (t instanceof r)
                        return e._state = 3,
                            e._value = t,
                            void a(e);
                    if ("function" == typeof i)
                        return void u(n(i, t), e)
                }
                e._state = 1,
                    e._value = t,
                    a(e)
            } catch (s) {
                o(e, s)
            }
        }
        function o(e, t) {
            e._state = 2,
                e._value = t,
                a(e)
        }
        function a(e) {
            2 === e._state && 0 === e._deferreds.length && r._immediateFn(function () {
                e._handled || r._unhandledRejectionFn(e._value)
            });
            for (var t = 0, n = e._deferreds.length; t < n; t++)
                i(e, e._deferreds[t]);
            e._deferreds = null
        }
        function l(e, t, n) {
            this.onFulfilled = "function" == typeof e ? e : null,
                this.onRejected = "function" == typeof t ? t : null,
                this.promise = n
        }
        function u(e, t) {
            var n = !1;
            try {
                e(function (e) {
                    n || (n = !0,
                        s(t, e))
                }, function (e) {
                    n || (n = !0,
                        o(t, e))
                })
            } catch (r) {
                if (n)
                    return;
                n = !0,
                    o(t, r)
            }
        }
        var d = setTimeout;
        r.prototype["catch"] = function (e) {
            return this.then(null, e)
        }
            ,
            r.prototype.then = function (e, n) {
                var r = new this.constructor(t);
                return i(this, new l(e, n, r)),
                    r
            }
            ,
            r.all = function (e) {
                var t = Array.prototype.slice.call(e);
                return new r(function (e, n) {
                    function r(s, o) {
                        try {
                            if (o && ("object" === ("undefined" == typeof o ? "undefined" : _typeof(o)) || "function" == typeof o)) {
                                var a = o.then;
                                if ("function" == typeof a)
                                    return void a.call(o, function (e) {
                                        r(s, e)
                                    }, n)
                            }
                            t[s] = o,
                                0 === --i && e(t)
                        } catch (l) {
                            n(l)
                        }
                    }
                    if (0 === t.length)
                        return e([]);
                    for (var i = t.length, s = 0; s < t.length; s++)
                        r(s, t[s])
                }
                )
            }
            ,
            r.resolve = function (e) {
                return e && "object" === ("undefined" == typeof e ? "undefined" : _typeof(e)) && e.constructor === r ? e : new r(function (t) {
                    t(e)
                }
                )
            }
            ,
            r.reject = function (e) {
                return new r(function (t, n) {
                    n(e)
                }
                )
            }
            ,
            r.race = function (e) {
                return new r(function (t, n) {
                    for (var r = 0, i = e.length; r < i; r++)
                        e[r].then(t, n)
                }
                )
            }
            ,
            r._immediateFn = "function" == typeof setImmediate && function (e) {
                setImmediate(e)
            }
            || function (e) {
                d(e, 0)
            }
            ,
            r._unhandledRejectionFn = function (e) {
                "undefined" != typeof console && console && console.warn("Possible Unhandled Promise Rejection:", e)
            }
            ,
            r._setImmediateFn = function (e) {
                r._immediateFn = e
            }
            ,
            r._setUnhandledRejectionFn = function (e) {
                r._unhandledRejectionFn = e
            }
            ,
            "undefined" != typeof module && module.exports ? module.exports = r : e.Promise || (e.Promise = r)
    }(window),
    function (e) {
        e.Promise || (e.Promise = Promise);
        var t = "required"
            , n = "email"
            , r = "minLength"
            , i = "maxLength"
            , s = "password"
            , o = "zip"
            , a = "phone"
            , l = "remote"
            , u = function (e, t) {
                if ("string" == typeof e)
                    return e;
                var n = "post" === t.toLowerCase() ? "" : "?";
                return Array.isArray(e) ? n + e.map(function (e) {
                    return e.name + "=" + e.value
                }).join("&") : n + Object.keys(e).map(function (t) {
                    return t + "=" + e[t]
                }).join("&")
            }
            , d = function (e) {
                var t = e.url
                    , n = e.method
                    , r = e.data
                    , i = e.debug
                    , s = e.callback
                    , o = e.error;
                if (i)
                    return void s("test");
                var a = e.async !== !1
                    , l = new XMLHttpRequest
                    , d = u(r, "get")
                    , c = null;
                "post" === n.toLowerCase() && (c = u(r, "post"),
                    d = ""),
                    l.open(n, t + d, a),
                    l.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                    l.onreadystatechange = function () {
                        4 === this.readyState && (200 === this.status ? s(this.responseText) : o && o(this.responseText))
                    }
                    ,
                    l.send(c)
            }
            , c = function (e, t) {
                this.options = t || {},
                    this.rules = this.options.rules || {},
                    this.messages = this.options.messages || void 0,
                    this.colorWrong = this.options.colorWrong || "#ff0000",
                    this.result = {},
                    this.elements = [],
                    this.bindHandlerKeyup = this.handlerKeyup.bind(this),
                    this.submitHandler = this.options.submitHandler || void 0,
                    this.promiseRemote = null,
                    this.isValidationSuccess = !1,
                    this.REGEXP = {
                        email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
                        zip: /^\d{5}(-\d{4})?$/,
                        phone: /^([0-9]( |-)?)?(\(?[0-9]{3}\)?|[0-9]{3})( |-)?([0-9]{3}( |-)?[0-9]{4}|[a-zA-Z0-9]{7})$/,
                        password: /[^\w\d]*(([0-9]+.*[A-Za-z]+.*)|[A-Za-z]+.*([0-9]+.*))/
                    },
                    this.DEFAULT_REMOTE_ERROR = "Error",
                    this.setForm(document.querySelector(e))
            };
        c.prototype = {
            defaultRules: {
                email: {
                    required: !0,
                    email: !0
                },
                name: {
                    required: !0,
                    minLength: 3,
                    maxLength: 15
                },
                text: {
                    required: !0,
                    maxLength: 300,
                    minLength: 5
                },
                password: {
                    required: !0,
                    password: !0,
                    minLength: 4,
                    maxLength: 8
                },
                zip: {
                    required: !0,
                    zip: !0
                },
                phone: {
                    phone: !0
                }
            },
            defaultMessages: {
                required: "Поле обязательно к заполнению",
                email: "Пожалуйста, введите действительный адрес электронной почты",
                maxLength: "Поле должно содержать максимум :value символов",
                minLength: "Поле должно содержать минимум :value символов",
                password: "Пароль недействителен",
                remote: "Эл. адрес уже существует"
            },
            handlerKeyup: function (e) {
                var t = e.target
                    , n = {
                        name: t.getAttribute("data-validate-field"),
                        value: t.value
                    };
                delete this.result[n.name],
                    this.validateItem({
                        name: n.name,
                        value: n.value,
                        isKeyupChange: !0
                    }),
                    this.renderErrors()
            },
            setterEventListener: function (e, t, n, r) {
                switch ("keyup" === t && (n = this.bindHandlerKeyup),
                r) {
                    case "add":
                        e.addEventListener(t, n);
                        break;
                    case "remove":
                        e.removeEventListener(t, n)
                }
            },
            getElementsRealValue: function () {
                for (var e = this.$form.querySelectorAll("*"), t = void 0, n = {}, r = 0, i = e.length; r < i; ++r)
                    if (t = e[r].getAttribute("name")) {
                        if ("checkbox" === e[r].type) {
                            n[t] = e[r].checked;
                            continue
                        }
                        n[t] = e[r].value
                    }
                return n
            },
            validationSuccess: function () {
                if (0 === Object.keys(this.result).length) {
                    if (this.isValidationSuccess = !1,
                        this.submitHandler) {
                        var e = this.getElementsRealValue();
                        return void this.submitHandler(this.$form, e, d)
                    }
                    this.$form.submit()
                }
            },
            setForm: function (e) {
                var t = this;
                this.$form = e,
                    this.$form.setAttribute("novalidate", "novalidate"),
                    this.$form.addEventListener("submit", function (e) {
                        return e.preventDefault(),
                            t.result = [],
                            t.getElements(),
                            t.promiseRemote ? void t.promiseRemote.then(function () {
                                t.promiseRemote = null,
                                    t.isValidationSuccess && t.validationSuccess()
                            }) : void (t.isValidationSuccess && t.validationSuccess())
                    })
            },
            isEmail: function (e) {
                return this.REGEXP.email.test(e)
            },
            isZip: function (e) {
                return this.REGEXP.zip.test(e)
            },
            isPhone: function (e) {
                return this.REGEXP.phone.test(e)
            },
            isPassword: function (e) {
                return this.REGEXP.password.test(e)
            },
            isEmpty: function (e) {
                var t = e;
                return e.trim && (t = e.trim()),
                    !t
            },
            checkLengthMax: function (e, t) {
                return e.length <= t
            },
            checkLengthMin: function (e, t) {
                return e.length >= t
            },
            getElements: function () {
                var e = this
                    , t = this.$form.querySelectorAll("[data-validate-field]");
                this.elements = [];
                for (var n = 0, r = t.length; n < r; ++n) {
                    var i = t[n]
                        , s = i.getAttribute("data-validate-field")
                        , o = i.value;
                    "checkbox" === i.type && (o = i.checked || "",
                        i.addEventListener("change", function (t) {
                            var n = t.target
                                , r = {
                                    name: n.getAttribute("data-validate-field"),
                                    value: n.checked
                                };
                            delete e.result[r.name],
                                e.validateItem({
                                    name: r.name,
                                    value: r.value
                                }),
                                e.renderErrors()
                        })),
                        this.setterEventListener(i, "keyup", this.handlerKeyup, "add"),
                        this.elements.push({
                            name: s,
                            value: o
                        })
                }
                this.validateElements()
            },
            validateRequired: function (e) {
                return !this.isEmpty(e)
            },
            validateEmail: function (e) {
                return this.isEmail(e)
            },
            validatePhone: function (e) {
                return this.isPhone(e)
            },
            validateMinLength: function (e, t) {
                return this.checkLengthMin(e, t)
            },
            validateMaxLength: function (e, t) {
                return this.checkLengthMax(e, t)
            },
            validatePassword: function (e) {
                return this.isPassword(e)
            },
            validateZip: function (e) {
                return this.isZip(e)
            },
            validateRemote: function (e) {
                var t = e.value
                    , n = e.name
                    , r = e.url
                    , i = e.successAnswer
                    , s = e.sendParam
                    , o = e.method;
                return new Promise(function (e) {
                    d({
                        url: r,
                        method: o,
                        data: _defineProperty({}, s, t),
                        async: !0,
                        callback: function (t) {
                            t.toLowerCase() === i.toLowerCase() && e("ok"),
                                e({
                                    type: "incorrect",
                                    name: n
                                })
                        },
                        error: function () {
                            e({
                                type: "error",
                                name: n
                            })
                        }
                    })
                }
                )
            },
            generateMessage: function (e, t, n) {
                var r = this.messages || this.defaultMessages
                    , i = r[t] && r[t][e] || this.messages && "string" == typeof this.messages[t] && r[t] || this.defaultMessages[e] || this.DEFAULT_REMOTE_ERROR;
                n && (i = i.replace(":value", n.toString())),
                    this.result[t] = {
                        message: i
                    }
            },
            validateElements: function () {
                var e = this;
                return this.lockForm(),
                    this.elements.forEach(function (t) {
                        e.validateItem({
                            name: t.name,
                            value: t.value
                        })
                    }),
                    this.promiseRemote ? void this.promiseRemote.then(function (t) {
                        return "ok" === t ? void e.renderErrors() : ("error" === t.type && alert("Server error occured. Please try later."),
                            e.generateMessage(l, t.name),
                            void e.renderErrors())
                    }) : void this.renderErrors()
            },
            validateItem: function (e) {
                var u = e.name
                    , d = e.value
                    , c = e.isKeyupChange
                    , f = this.rules[u] || this.defaultRules[u] || !1;
                if (f)
                    for (var h in f) {
                        var m = f[h];
                        switch (h) {
                            case t:
                                if (!m)
                                    break;
                                if (this.validateRequired(d))
                                    break;
                                return void this.generateMessage(t, u);
                            case n:
                                if (!m)
                                    break;
                                if (this.validateEmail(d))
                                    break;
                                return void this.generateMessage(n, u);
                            case r:
                                if (!m)
                                    break;
                                if (this.validateMinLength(d, m))
                                    break;
                                return void this.generateMessage(r, u, m);
                            case i:
                                if (!m)
                                    break;
                                if (this.validateMaxLength(d, m))
                                    break;
                                return void this.generateMessage(i, u, m);
                            case a:
                                if (!m)
                                    break;
                                if (this.validatePhone(d))
                                    break;
                                return void this.generateMessage(a, u);
                            case s:
                                if (!m)
                                    break;
                                if (this.validatePassword(d))
                                    break;
                                return void this.generateMessage(s, u);
                            case o:
                                if (!m)
                                    break;
                                if (this.validateZip(d))
                                    break;
                                return void this.generateMessage(o, u);
                            case l:
                                if (c)
                                    break;
                                if (!m)
                                    break;
                                var v = m.url
                                    , p = m.successAnswer
                                    , y = m.method
                                    , g = m.sendParam
                                    , b = this.$form.querySelector('input[data-validate-field="' + u + '"]');
                                return this.setterEventListener(b, "keyup", this.handlerKeyup, "remove"),
                                    void (this.promiseRemote = this.validateRemote({
                                        name: u,
                                        value: d,
                                        url: v,
                                        method: y,
                                        sendParam: g,
                                        successAnswer: p
                                    }))
                        }
                    }
            },
            clearErrors: function () {
                for (var e = document.querySelectorAll(".js-validate-error-label"), t = 0, n = e.length; t < n; ++t)
                    e[t].remove();
                e = document.querySelectorAll(".js-validate-error-field");
                for (var r = 0, i = e.length; r < i; ++r)
                    e[r].classList.remove("js-validate-error-field"),
                        e[r].style.border = "",
                        e[r].style.color = "",
                        e[r].borderRadius = ""
            },
            renderErrors: function () {
                if (this.clearErrors(),
                    this.unlockForm(),
                    this.isValidationSuccess = !1,
                    0 === Object.keys(this.result).length)
                    return void (this.isValidationSuccess = !0);
                for (var e in this.result)
                    for (var t = this.result[e].message, n = this.$form.querySelectorAll('[data-validate-field="' + e + '"]'), r = 0, i = n.length; r < i; ++r) {
                        var s = document.createElement("div")
                            , o = n[r];
                        if (s.innerHTML = t,
                            s.className = "js-validate-error-label",
                            s.setAttribute("style", "color: " + this.colorWrong),
                            o.style.border = "1px solid " + this.colorWrong,
                            o.style.borderRadius = "15px ",
                            o.style.color = "" + this.colorWrong,
                            o.classList.add("js-validate-error-field"),
                            "checkbox" !== o.type)
                            o.parentNode.insertBefore(s, o.nextSibling);
                        else {
                            var a = document.querySelector('label[for="' + o.getAttribute("id") + '"]');
                            "label" === o.parentNode.tagName.toLowerCase() ? o.parentNode.parentNode.insertBefore(s, null) : a ? a.parentNode.insertBefore(s, a.nextSibling) : o.parentNode.insertBefore(s, o.nextSibling)
                        }
                    }
            },
            lockForm: function () {
                for (var e = this.$form.querySelectorAll("input, textarea, button, select"), t = 0, n = e.length; t < n; ++t)
                    e[t].setAttribute("disabled", "disabled"),
                        e[t].style.pointerEvents = "none",
                        e[t].style.webitFilter = "grayscale(100%)",
                        e[t].style.filter = "grayscale(100%)"
            },
            unlockForm: function () {
                for (var e = this.$form.querySelectorAll("input, textarea, button, select"), t = 0, n = e.length; t < n; ++t)
                    e[t].removeAttribute("disabled"),
                        e[t].style.pointerEvents = "",
                        e[t].style.webitFilter = "",
                        e[t].style.filter = ""
            }
        },
            e.JustValidate = c
    }(window);
